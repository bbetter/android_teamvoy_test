buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.14.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'robolectric'


android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.example.andriypuhach.android_teamvoy_test"
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"

    }
    buildTypes {
        release {
            minifyEnabled false
         //   proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            minifyEnabled false
         //   proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }
    sourceSets {
        androidTest.setRoot('src/test')
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.google.android.gms:play-services-maps:6.5.87'
    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile 'com.squareup.okhttp:okhttp:1.5.4'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    compile 'com.facebook.android:facebook-android-sdk:3.22.0'
    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'joda-time:joda-time:2.7'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.daimajia.slider:library:1.1.2@aar'

    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.3'
    androidTestCompile 'com.squareup:fest-android:1.0.8'

}

robolectric{
    include '**/*Test.class'
    maxHeapSize = "2048m"
}

task addTest {
    def src = ['src/test/java']
    def file = file("app.iml")
    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find {
                    it.@url == path
                }
                if (set == null) {
                    new Node(node, 'sourceFolder', [
                            'url': 'file://$MODULE_DIR$/' + "${it}",
                            'isTestSource': "true"
                    ])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}
// always do the addtest on prebuild
gradle.projectsEvaluated { preBuild.dependsOn(addTest) }